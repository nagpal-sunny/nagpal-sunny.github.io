

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Code World üåê</title>
  <subtitle>Blog about iOS, Swift, Mobile Development and Design Pattern.</subtitle>
  <updated>2023-10-07T14:18:59+05:30</updated>
  <author>
    <name>Saurav Nagpal</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> ¬© 2023 Saurav Nagpal </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title></title>
    <link href="http://localhost:4000/posts/2023-09-25-gitlfs/" rel="alternate" type="text/html" title="" />
    <published>2023-10-07T14:18:59+05:30</published>
  
    <updated>2023-10-07T14:18:59+05:30</updated>
  
    <id>http://localhost:4000/posts/2023-09-25-gitlfs/</id>
    <content src="http://localhost:4000/posts/2023-09-25-gitlfs/" />
    <author>
      <name>Saurav Nagpal</name>
    </author>

  
    
  

  
    <summary>
      





      üåë Outline

List View in Swift UI has the capability to support expandable lists without writing any extra logic for expansion or collapse. The section in a list can serve as the main cell and the cell can serve as the expended cell.

Unlike UIKit, SwiftUI List View adjusts automatically based on the data source. No need to reload or delete cells just provide the expected format data and it will...
    </summary>
  

  </entry>

  
  <entry>
    <title>SwiftUI - Create Expandable List (Section Approach)</title>
    <link href="http://localhost:4000/posts/ios/swift/swiftui/Expandable-list/" rel="alternate" type="text/html" title="SwiftUI - Create Expandable List (Section Approach)" />
    <published>2023-09-26T11:22:00+05:30</published>
  
    <updated>2023-09-26T11:22:00+05:30</updated>
  
    <id>http://localhost:4000/posts/ios/swift/swiftui/Expandable-list/</id>
    <content src="http://localhost:4000/posts/ios/swift/swiftui/Expandable-list/" />
    <author>
      <name>Saurav Nagpal</name>
    </author>

  
    
    <category term="iOS" />
    
    <category term="Swift" />
    
    <category term="SwiftUI" />
    
  

  
    <summary>
      





      üåë Outline

List View in Swift UI has the capability to support expandable lists without writing any extra logic for expansion or collapse. The section in a list can serve as the main cell and the cell can serve as the expended cell.

Unlike UIKit, SwiftUI List View adjusts automatically based on the data source. No need to reload or delete cells just provide the expected format data and it will...
    </summary>
  

  </entry>

  
  <entry>
    <title>Simplify Template Pattern (Behaviour Pattern)</title>
    <link href="http://localhost:4000/posts/design%20pattern/clean%20code/templatepattern/" rel="alternate" type="text/html" title="Simplify Template Pattern (Behaviour Pattern)" />
    <published>2023-09-20T20:00:10+05:30</published>
  
    <updated>2023-09-20T20:00:10+05:30</updated>
  
    <id>http://localhost:4000/posts/design%20pattern/clean%20code/templatepattern/</id>
    <content src="http://localhost:4000/posts/design%20pattern/clean%20code/templatepattern/" />
    <author>
      <name>saurav_nagpal</name>
    </author>

  
    
    <category term="Design Pattern" />
    
    <category term="Clean Code" />
    
  

  
    <summary>
      





      üåë Outline

The Template pattern defines steps for an algorithm in a superclass and a subclass can override specific steps to provide desired behaviour without changing the execution flow of the algorithm. The function that decides the execution sequence of an algorithm is called the Template method.


  Template - A structure to be followed for an algorithm.


üå•Ô∏è Why Template

While writing cod...
    </summary>
  

  </entry>

  
  <entry>
    <title>Game - Connect Balls</title>
    <link href="http://localhost:4000/posts/apps/apps-games-ConnectBall/" rel="alternate" type="text/html" title="Game - Connect Balls" />
    <published>2023-09-10T09:15:10+05:30</published>
  
    <updated>2023-09-10T09:15:10+05:30</updated>
  
    <id>http://localhost:4000/posts/apps/apps-games-ConnectBall/</id>
    <content src="http://localhost:4000/posts/apps/apps-games-ConnectBall/" />
    <author>
      <name>Saurav Nagpal</name>
    </author>

  
    
    <category term="Apps" />
    
  

  
    <summary>
      





      

It is about:

School time Memories are always there to cherish. Playing games on paper while the teacher is present in the classroom is what everyone remembers.  This was one of the games I played most of the time with friends. The game is simple yet engaging. You have to connect all the balls (dots on the paper) with a line. The line can be drawn with the use of a joystick.

Let‚Äôs play all t...
    </summary>
  

  </entry>

  
  <entry>
    <title>Enum in Swift</title>
    <link href="http://localhost:4000/posts/ios/swift/enum-in-swift/" rel="alternate" type="text/html" title="Enum in Swift" />
    <published>2023-07-15T14:22:00+05:30</published>
  
    <updated>2023-07-15T14:22:00+05:30</updated>
  
    <id>http://localhost:4000/posts/ios/swift/enum-in-swift/</id>
    <content src="http://localhost:4000/posts/ios/swift/enum-in-swift/" />
    <author>
      <name>Saurav Nagpal</name>
    </author>

  
    
    <category term="iOS" />
    
    <category term="Swift" />
    
  

  
    <summary>
      





          guard let category = attributes.filter({
        if case .category(_) = $0 {
            return true
        }
        return false
    }).first, case .category(let categoryMask) = category  else {
        return nil
    }


What is ARC?

ARC is a memory management tool which tracks and manages the application memory. It is a compiler-driven feature. It observes the reference count of objec...
    </summary>
  

  </entry>

</feed>


